{"pageProps":{"allTags":{"biohacking":"biohacking","buffer-overflow":"buffer overflow","development":"Development","dll-injection":"DLL Injection","domains":"domains","ee":"EE","example":"example","how-to":"how to","makefile":"Makefile","memory":"memory","pcap":"pcap","phishing":"phishing","re":"RE","research":"research","rfid":"RFID","story":"Story","windows-api":"Windows API","windows-hacking":"Windows Hacking"},"posts":[{"title":"Phishing/Scam campaign research (ep. 2)","slug":"phishing-campaign-research-ep-2","date_published":1541023030000,"date_updated":1542245609000,"tags":["research","phishing"],"excerpt":"I got another email. This one was interesting, the email was the standard \"we had a rat on your computer that we used to take dirty pictures of you, give us money or we will  send it to all your contacts\".","cover":"2018/11/chrome_2018-11-14_11-31-28.png","author":{"name":"Pips","avatar":"avatars/pips.jpg"},"content":"\nI got another email. This one was interesting, the email was the standard \"we had a rat on your computer that we used to take dirty pictures of you,  give us money or we will  send it to all your contacts\". \n\nThis is the email that I received.\n\n![](2018/10/image-17.png \"The scam email\")\n\nIt's a fairly standard \"give us money or we send dirty photos we took to your contacts\" kind of scam email, but this one actually does something that I have not seen previously. The scammers establish \"credibility\" by actually telling you what your password is. The scammers purchased a dumped site database (that assumedly did not hash or salt passwords), correlated the email address in the DB, and sent out an email.\n\nThis scam is incredibly effective when you consider that a vast majority of people use the same password for every account. \n\nThis scam also does something unique; they spoofed the sender of this email  to be me. \n\n    Delivered-To: hello@[redacted]\n    Received-SPF: none (zoho.com: 171.99.132.162 is neither permitted nor denied by domain of [redacted]) client-ip=171.99.132.162; envelope-from=hello@[redacted]; helo=171-99-132-162.static.asianet.co.th;\n    Authentication-Results: mx.zohomail.com;\n        spf=none (zoho.com: 171.99.132.162 is neither permitted nor denied by domain of [redacted])  smtp.mailfrom=hello@[redacted]\n    Received: from 171-99-132-162.static.asianet.co.th (171-99-132-162.static.asianet.co.th [171.99.132.162]) by mx.zohomail.com\n        with SMTP id [redacted]; Mon, 29 Oct 2018 19:47:47 -0700 (PDT)\n\nThis was an interesting way of finding out that my mail server has incorrectly configured SPF records. This establishes ~darknet spooky hacker credibility~ by sending an email as you. \n\nI am going to take a shot in the dark that they try several different techniques to do this. The first, is just standard SPF record spoofing to send the message. Since the boilerplate message contains `Please don't try to contact me or find me, it is impossible, since I sent you an email from your email account.`, I am going to assume that sending mail as the recipient is part of the scam in general. \n\nI also have another theory, that when they send the mail, if SPF records prevent spoofing, that they then try to authenticate with the target mail server to craft the email using the harvested credentials. This would also prove to the scammers if the harvested credentials were valid. This is a technique that has been seen in the wild in previous phishing campaigns, talked about [here](https://research.801labs.org/phishing-campaign-research/).\n\nDigging a little deeper and looking at the email headers above, the IP that sent the email is `171.99.132.162`. This IP appears to be a standard telecom IP address, belonging to a Broadband ISP located out of Bangkok, Thailand. \n\n![](2018/11/image.png)\n\nRiskiq also only has two carrier-assigned DNS records for this IP address\n\n![](2018/11/image-1.jpg)\n\nIt appears that this IP is for sure a private (possibly residential IP). Is this IP the actual IP of the scammer? I hope they they wouldn't be so dumb, but who knows. Lets poke at it on [Shodan](https://www.shodan.io). \n\n![](2018/11/image-2.png)\n\nThe only running service on this host is a web server. Ohhh boy, that's great. Since there was no DNS record for a TLD pointing towards this IP, it's safe to assume that it is a residential/business host that opened up a web server for something, or the scammer is running this from their home IP and has a web server running. Lets see whats on it. \n\n![](2018/11/image-3.jpg)\n\nIt appears this IP address is hosting a Hikvision camera control panel. Cameras are the number one compromised host for botnets or malicious activity on the internet. It's easy to assume that the person hosting this publicly accessible camera control panel left it with default passwords, and somebody logged in and compromised one of the cameras, adding it to a botnet. \n\nAside from trying to log in (illegal) there's nothing more I can do for this research. :(\n"},{"title":"ASCII art in hidden places","slug":"ascii-art-in-hidden-places","date_published":1540949125000,"date_updated":1540949125000,"tags":["research","how to"],"excerpt":"Hiding data in new and interesting places has always been a fun objective for anyone who likes creating and solving challenges. One of the interesting secret hiding places for data I like to use is server headers.","cover":"2018/10/4TJDOj5.jpg","author":{"name":"Pips","avatar":"avatars/pips.jpg"},"content":"\nHiding data in new and interesting places has always been a fun objective for anyone who likes creating and solving challenges. One of the interesting secret hiding places for data I like to use is server headers. \n\nI found out that you can override server headers live in-page with PHP's `header()` function. Combine this with some ascii art, and in the header of a server response you can now show people super hidden ascii art.\n\n![](2018/10/image-15.png)\n\nHere's the code to make it happen. Replace the `$subject` with new ascii art. \n\n    <?php\n    $i = 0;\n    $subject= \"\n    #    ,-''''-.\n    #   (.  ,.   L        ___...__\n    #   /7} ,-`  `'-==''``        ''._\n    #  //{                           '`.\n    #  \\_,X ,                         : )\n    #      7                          ;`\n    #      :                  ,       /\n    #       \\_,                \\     ;\n    #         Y   L_    __..--':`.    L\n    #         |  /| ````       ;  y  J\n    #         [ j J            / / L ;\n    #         | |Y \\          /_J  | |\n    #         L_J/_)         /_)   L_J\n    #        /_)                   /_)\";\n    $header_name= \"blackmagic-\";\n    foreach(preg_split(\"/((\\r?\\n)|(\\r\\n?))/\", $subject) as $line){\n    \n        $pre = \"\";\n        if($i<10)\n            $pre = \"00\";\n        elseif ($i<100)\n            $pre = \"0\";\n    \n    \n    \n        header( \"{$header_name}{$pre}{$i}: {$line}\");\n        $i++;\n    \n    }\n    ?>\n    \n    \n"},{"title":"Phishing/Scam campaign research","slug":"phishing-campaign-research","date_published":1540617176000,"date_updated":1541023021000,"tags":["research","phishing"],"excerpt":"An email came in that an end user thought was suspicious. The end user passed it up to one of our team members, who then passed it up to me.","cover":"2018/10/image-3.jpg","author":{"name":"Pips","avatar":"avatars/pips.jpg"},"content":"\nAn email came in that an end user thought was suspicious. The end user passed it up to one of our team members, who then passed it up to me.\n\n![](2018/10/image.jpg \"Initial phishing email\")\n\nTo start off, this email is just dumb. The sender never bothered to copy legitimate Microsoft email formatting, and the wording is just strange. It doesn’t inspire even the most inexperienced users to “***rectify password expiration***”. Just for fun, let’s look at the url.\n \n![](2018/10/image-2.jpg \"Suspicious url\")\n\n`hxxp://piba.org.br` isn’t a known phishing site, it goes to a Portuguese church website. The site doesn’t matter, what does matter is it looks like the script is being ran through a compromised WordPress site, since it’s going through a `/wp-content/` uploads folder. It appears that somebody could upload a script to the WordPress site that acts as a pass-through to further obfuscate and prevent the campaign from being detected.\n\nOnce you click the link that passes through WordPress, you end up at a not-so-convincing office 365 login page.\n\n![](2018/10/image-3.jpg \"Bad credential harvesting page\")\n\nThe email address in the link autofills the email box for your account. Let’s point out some interesting things about this scam site though. \n\n- the copyright on the bottom of the page has the **wrong year**.\n- The site doesn't fill the entire page.\n- The buttons and links don't work\n\n Why don’t they work? Because they’re **images**.\n \n![](2018/10/image-4.jpg \"Everything is a background image, instead of HTML/CSS\")\n\nLet’s look at the url and domain. `hxxp://fwclub.co.za/` is a winemaker’s club. It also doesn’t appear to be running any special framework either that would be exploitable.\n\n![](2018/10/image-5.jpg \"No interesting services detected\")\n\nThere are quite a few open ports as well on this server, four of them are CPanel. It’s possible that the person running this phishing campaign got access to the site’s CPanel and piggybacked off their normal traffic.\n\nBack to the original url, `hxxp://fwclub.co.za/includes/Office1/Login.php`. If we try one directory up, `/Office1/`, it redirects back to this script. So, lets go up another directory to `/includes/`.\n\n![](2018/10/image-6.jpg \"All the scripts!\")\n\nHmm, looks like directory listing is turned on, and… there’s a recent backup of their phishing campaign. Let’s look at this backup.\n\n![](2018/10/image-7.jpg)\n\nYup, that’s the source code to the credential dumping code. A day later, the domain is shut down in one form or another :(\n \n![](2018/10/image-8.jpg)\n\nSophos also flagged the site, finally.\n\n![](2018/10/image-9.jpg)\n\nWell, we’ve still got their source code, so let’s take a look. \n\n`blocker.php` is a very interesting file.\n\n![](2018/10/image-10.jpg)\n\nThe code uses a function I’ve never actually seen in PHP before, `gethostbyaddr()`, which attempts to lookup the incoming IP address to a hostname and possibly an identifier, like as Google or AWS, as well as the host names for a few other malware and phishing scanners.\n\nIt also has a list of banned IP addresses, ranges from Google, Cogent, Digital Ocean, ISC, EQNET, INSC, Amazon, Softlayer, EIG, NTT America, MX Logic, British Telecom, Nianet, Elisa, GigeNET, University Of Minnesota(?), NetVision, NET1 Plus, Unified Webhosting, MULTACOM, China Unicom, Dassault Systèmes, Hurricane Electric, CoreSpace, SITA, Orange S.A, Cyber Wurx, CYBERCON, Zayo Bandwidth, Savvis, QTS, Kasetsart University in Thailand(?), Chungnam National University in South Korea(?), RCC, USAA, Comverse, Omnico Hosting, AT&T, Marlink, Airstream, The Department of Defense Network Information Center, and DataPipe. Whew, that was a long list. \n\nThe major group of IP ranges are hosting providers that have a large amount of traffic for VPN/Proxy services. It would make sense that the Phisher’s target audience falls outside of hosting companies, it falls to individual users and companies. The second interesting group of IPs are for a few Universities, none in the list make any sense though. Only one of them has a recognized Cybersecurity course. It appears that MXLogic is also on the list, probably to avoid enterprise email filtering detection for companies that use it. I also found it a little interesting that they blocked the DoD as well.\n\nThe last bit of code simply checks if the useragent falls under msnbot, google bot, yahoo bot, etc. They also have a robots.txt that does the same thing.\n\nOnce it has checked the incoming request, the index.php file sets the header (URL) to something along the lines of  `login.php?websrc=<random numbers>&dispatched=<random numbers>&id=<random numbers>&email=<compromised email>`. It’s interesting that the phishing author attempted to make the URL look more legitimate and lengthy, as many official emails are.\n \n![](2018/10/image-11.jpg)\n\nOnce it goes to the Login.php page, it loads the two images and two text boxes that are supposed to look like, and auto fills the email address, to make it look more “authentic”.\n\nOn the form submit, it hits `logon.php` (not login). Here’s where something interesting happens. The first thing the script does, is gets the visitors country from geoplugin.net. The second thing it does, is craft a basic email and loads in the submitted username, password, ip, browser, date, and geoip lookup. It then sets the TO: field of this email to ipconfigura@gmail.com, the subject to `“Office365 | <country> | <username>”`  and lastly sets the FROM: field to `“John De Fisher <new@cpanel.com>”`.\n\n![](2018/10/image-12.jpg)\n\nAfter it crafts this email, it then runs a function called `check()` from inside a PHPMailer directory from the script `smtp.php`, and passes the submitted username and password. Let’s look at this script then.\n\n![](2018/10/image-13.jpg)\n\nThis `check()` function is incredibly clever. It connects to the office365 SMTP server, authenticates with the server using the submitted credentials, sets the FROM field to the email `hbergamini@truehomesusa.com`. This is interesting, `truehomesusa.com` doesn’t seem to be flagged and is a legitimate website, they even run on office 365. I take an educated guess and figure that this domain has not fully set up the correct MX records to protect their domain from email spoofing, allowing this test email to not be noticed by most people and not appear in anybody’s inbox. Clever. It then checks to see if the email sent. If it could send, it means that the submitted credentials successfully authenticated with Microsoft and are correct. \n\nThis is something I don’t see that often. It’s commonplace for campaigns to accept and send off any credentials it gets, but this one is checking the validity of the credentials. It also allows the phishing author to provide a “Password not recognized” message, to skeptical users who input a wrong password the first time to see if it works or not.\n \n![](2018/10/image-14.jpg)\n\nAaand that's the analysis of this phishing campaign.\n"},{"title":"Access-control exploitation (part 1)","slug":"access-control-exploitation-part-1","date_published":1540434784000,"date_updated":1540434915000,"tags":["research","RFID"],"excerpt":"One job I was tasked with was getting a fingerprint-based reader tested and operational for demoing our new level of hardware support for more secure facilities, 2 factor physical access control; something you are (fingerprint) and something you know or have. (pin/card)","cover":"2018/10/ugdTOpe.jpg","author":{"name":"Pips","avatar":"avatars/pips.jpg"},"content":"\n### Fingerprint readers are silly\n\nDISCLAIMER: I used to work for a physical security company architecting access control and surveillance solutions. \n\nOne job I was tasked with was getting a fingerprint-based reader tested and operational for demoing our new level of hardware support for more secure facilities, 2 factor physical access control; something you are (fingerprint) and something you know or have. (pin/card)\n\nWe were given these readers to test. The readers had a TON of wiring on the back of them. The two important things that the reader pinouts contained was\n\n1. Weigand 2-pair access control wire\n2. POE-enabled RJ45 port   \n\nThe way that these readers work with existing access control systems **completely invalidates** the security benefits of using a fingerprint-based authentication system. Let me explain the architecture and design of this system.\n\nFirst, you must enrol fingerprints on the reader. You essentially scan a fingerprint a handful of times, give it a name, and assign it a badge. Wait, a badge? Yes. The reader contains a **local** database of every fingerprint in it's system, as well as a **card **associated to this fingerprint. When a fingerprint authenticates and is validated to the local database on the reader, the reader takes the card associated with that fingerprint and relays it over Wiegand wiring to an access control box. This reader is essentially functioning the exact same as a normal fingerprint-less card reader.\n\n![](2018/10/Untitled-Diagram.png \"Finger is read, authenticated against a print DB, then the card associated is passed over to the access control system\")\n\nThe fingerprint reader on the back end/access control provides the exact same level of authentication as a standard card-based system. If the reader is configured to pass through card reads (passthrough mode for 2nd factor, or for card or fingerprint setups) the fingerprints are **completely useless**.\n\n---\n\n# Potential attack 1: network permeter comprimise\n\nThis edge device has an ethernet port. \n\nWhich means it has an ethernet cable, which is going to have to tie into an internal access control network to allow it to talk to the provisioning server. Most people put their ICS on the same network. Cameras, access controls, gate controls, HVAC, etc. From the exterior of the building, you now have hardline access to an internal control network. \n\nIf this network has any kind of network security (for instance, MAC address filtering), you can pull the MAC of the fingerprint reader directly from a sticker located next to the ethernet port. Spoof that MAC and you have access.\n\n---\n\n# Potential attack 2: device fingerprint datastore compromise\n\nThe database containing **fingerprint** data is stored non-centrally, and every reader has a copy. The enrolment process is\n\n1. Scan fingerprint on central server\n2. Associate card, name, etc to fingerprint\n3. Push new user profile to all readers on the network\n4. Reader receives profile, adds it to internal datastore\n\nIf you compromise the edge device (reader), you can potentially access this database through their control software, or directly through chip-off forensics. This datastore is going to not just contain fingerprint data, of which I would consider **incredibly valuable and sensitive information**, it would also contain all associated cards for every user profile. \n\nUnless a mass card revocation is initiated, you now also have a datastore of every functioning, authenticating, door-opening card in the system. Additionally, you may have full names, positions, teams, pictures, etc for every user.\n\n---\n\n# Potential attack 3: Weigand man-in-the-middle\n\nThis isn't specifically a fingerprint reader specific attack, but it is just as effective. You can purchase a device that clamps onto the Weigand data wires and can Man-in-the-middle cards over the wire. With this, you can \n\n- offload all cards as they get sent to the access control system\n- in-line replace/denial of service on all/selected cards (lock someone out of the building)\n- Replay a functioning card without having to have a card cloner/spoofer\n\nDevices like the [ESPKey](https://redteamtools.com/espkey) are cheap ($99) and usable with bluetooth or wifi.\n\n![](2018/10/ugdTOpe.jpg \"ESPKey in-line man-in-the-middle\")\n"}],"pagination":{"totalPages":2,"totalItems":14,"currentPage":2}},"__N_SSG":true}