{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\n\nclass Blog {\n  constructor(dir, postsPerPage) {\n    this.dir = join(process.cwd(), dir);\n    this.postsPerPage = postsPerPage;\n  }\n\n  getSlugs() {\n    return fs.readdirSync(this.dir);\n  }\n\n  getPostBySlug(slug) {\n    const realSlug = slug.replace(/\\.md$/, '');\n    const fullPath = join(this.dir, `${realSlug}.md`);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const {\n      data,\n      content\n    } = matter(fileContents);\n    const post = Object.assign({}, data, {\n      slug: realSlug,\n      content\n    });\n    post.excerpt = 'excerpt' in data && data.excerpt ? data.excerpt : content.replace(/^(.{50}[^\\s]*).*/, \"$1\");\n    post.tags = 'tags' in data && data.tags ? data.tags.split(/,\\s?/g) : [];\n    post.date_published = 'date_published' in data && 'getTime' in data.date_published ? data.date_published.getTime() : data.date_published;\n    post.date_updated = 'date_updated' in data && 'getTime' in data.date_updated ? data.date_updated.getTime() : data.date_updated;\n    return post;\n  }\n\n  getPosts(page = 1, perPage = -1) {\n    const slugs = this.getSlugs();\n    const posts = slugs.map(slug => this.getPostBySlug(slug)).sort((post1, post2) => post1.date_published > post2.date_published ? -1 : 1);\n    return this.paginatePosts(posts, page, perPage);\n  }\n\n  getPostsByTag(tag, page = 1, perPage = -1) {\n    const {\n      posts\n    } = this.getPosts();\n    const tags = this.getTags();\n    const taggedPosts = posts.reduce((acc, post) => {\n      if (post.tags.includes(tags[tag])) {\n        acc.push(post);\n      }\n\n      return acc;\n    }, []);\n    return this.paginatePosts(taggedPosts, page, perPage);\n  }\n\n  getTags() {\n    const {\n      posts\n    } = this.getPosts();\n    return Object.fromEntries(posts.reduce((acc, post) => {\n      if (!('tags' in post)) return acc;\n      post.tags.forEach(tag => {\n        if (!acc.includes(tag)) acc.push(tag);\n      });\n      return acc;\n    }, []).sort((tag1, tag2) => {\n      const tag1U = tag1.toUpperCase();\n      const tag2U = tag2.toUpperCase();\n      return tag1U < tag2U ? -1 : tag2U < tag1U ? 1 : 0;\n    }).map(tag => {\n      const handle = tag.toLowerCase().replace(/\\W/ig, '-');\n      return [handle, tag];\n    }));\n  }\n\n  paginatePosts(posts, page, perPage) {\n    return {\n      posts: perPage < 0 ? posts : posts.slice((page - 1) * perPage, page * perPage),\n      pagination: {\n        totalPages: Math.ceil(posts.length / perPage),\n        totalItems: posts.length,\n        currentPage: page\n      }\n    };\n  }\n\n}\n\nexport const research = new Blog('content/research', 10);\nexport const news = new Blog('content/news', 10);","map":null,"metadata":{},"sourceType":"module"}