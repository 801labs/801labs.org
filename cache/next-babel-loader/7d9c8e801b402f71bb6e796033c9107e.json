{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Layout from \"../../../../../layouts/Layout\";\nimport Blog from \"../../../../../components/Blog\";\nimport Meta from \"../../../../../components/Meta\";\nimport { useRouter } from \"next/router\";\nimport { news } from \"../../../../../lib/blogs\";\n\nconst Page = props => {\n  const router = useRouter();\n  return __jsx(Layout, null, __jsx(Meta, {\n    title: `News: ${props.allTags[router.query.tag]}`,\n    description: \"\"\n  }), __jsx(Blog, {\n    allTags: props.allTags,\n    heroTitle: \"801 Labs News\",\n    pagination: props.pagination,\n    paginationPath: `about/news/tag/${router.query.tag}`,\n    path: \"/about/news\",\n    posts: props.posts,\n    title: props.allTags[router.query.tag]\n  }));\n};\n\nexport async function getStaticProps({\n  params\n}) {\n  if (!params) return;\n  const allTags = news.getTags();\n  const data = news.getPostsByTag(params.tag, +params.page, news.postsPerPage);\n  return {\n    props: _objectSpread({\n      allTags\n    }, data)\n  };\n}\nexport async function getStaticPaths() {\n  const tags = news.getTags();\n  const paths = [];\n  Object.keys(tags).forEach(tag => {\n    const {\n      pagination\n    } = news.getPostsByTag(tag, 1, news.postsPerPage);\n\n    for (let i = 1; i <= pagination.totalPages; i++) {\n      paths.push({\n        params: {\n          page: `${i}`,\n          tag\n        }\n      });\n    }\n  });\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}